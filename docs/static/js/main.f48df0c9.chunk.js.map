{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"2MAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,aADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCLdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDAE0BC,UAAWH,GAFrC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXnB,kBAeZM,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCCGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyBxC,OAlBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAM1B,CAACpB,IAKGqB,EDfwBK,CAAc1B,GAAlCa,EAP0B,EAO/BN,KAAaa,EAPkB,EAOlBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEejBgB,EAhCM,WAAO,IAAD,EACWzC,mBAAS,CAC1C,aAFsB,mBAClB0C,EADkB,KACN3C,EADM,KAUzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCnBZ6B,EAAUC,SAASC,cAAc,SAEvCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.f48df0c9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputvalue] = useState(\"One Punch\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputvalue(e.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputvalue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n","\r\nexport const getGifs = async ( category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=fb3lE73znlU0yeGyQBxzidd6tSSFJDOf`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    //objeto que cogemos lo que necesitamos de la data\r\n    const gifs = data.map(img => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n   \r\n    return gifs;\r\n  };\r\n\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n//cada vez que cambia un valor se vuelve a renderizar todo el componente\r\n//Usando useEffect se evita este comportamiento renderizando solo la primera vez,\r\n//pasandole lista de dependencias vacia []\r\nexport const GifGrid = ({ category }) => {\r\n  //   const [images, setImages] = useState([]);\r\n  //   useEffect(() => {\r\n  //     getGifs(category)\r\n  //     .then(setImages)\r\n  //   }, [category]);\r\n\r\n  const { data:images, loading } = useFetchGifs( category );\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n      {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n///los efectos no pueden ser async\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n               \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                \r\n               \r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\r\n     \"One Punc\"//,\r\n    // \"Samurai X\",\r\n    // \"Dragon Ball\",\r\n  ]);\r\n\r\n  //   const handleAdd = () => {\r\n  //     setCategories([...categories, \"HunterXHunter\"]);\r\n  //   };\r\n  return (\r\n    <>\r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {\r\n          categories.map( category => (\r\n             <GifGrid \r\n             key={category} \r\n             category={category}\r\n             />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\nGifExpertApp.propTypes = {\r\n  //setCategories: PropTypes.func.isRequired,\r\n};\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nconst divRoot = document.querySelector(\"#root\");\n\nReactDOM.render(<GifExpertApp  />,divRoot);\n\n\n\n"],"sourceRoot":""}